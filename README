"""
FILE NAME: README.txt

DESCRIBTION: this file contains detailed information about the project.
	     Specifically, the project strcuture, and the algorithms 
	     implementations.
"""

## Project Name: Connect Four Game
## Project Description
This project implements the game of Connect Four wih different types of players. The players can be Humanor AI. The AI players can use different algorithms, including Minimax and Monte Carlo Search Tree. 

## How to Run
	1) make sure you give execution privliges to the script game.sh using `chmod u+x game.sh`
	2) follow the instructions in game.sh to learn more about the arguments needed. Below are
	   a couple of examples of how to run the game with different parameters
	
	./game.sh 		==>	runs the game with default board dimensions and 
					player types and lookaheads (found in globals.jl) 

	./game.sh 67 rc         ==>     runs the game with a board of size 6x7
                                        and Player 1 with Expectiminimax, and
                                        Player 2 with Monte Carlo

	./game.sh 67 mm 43      ==>     board of size 6x7, and two Minimax players
                                        with lookaheads 4 and 3 respectively
## Project Structure
	- questions.txt: contains short answers to the handout questions 1 and 3
	- discussion.pdf: contains discussions of the game players performance using
			  different algorithms

	- game.sh: a script used to run the game with custom arguments
	- structs.jl: contains definitions of Board and Player structs with constructors
	- globals.jl: global constants used by different files in the project
	- board.jl: board-specific functions such as adding checkers and checking for winners
	- player.jl: player-specific functions including obtaining next moves for players from different algorithms
	- eval.jl: contains the evaluation functions used for Minimax and Expectiminimax
	- minimax.jl: implementation of Minimax
	- expectiminimax.jl: implementation of Expectiminmax (Minimax with random moves) 
	- monteCarlo.jl: implementation of Monte Carlo Search Tree with UCT
	- connectfour.jl: 
	- tests.jl


2) Implement the game Connect Four in Julia. Implement the board,
positions in the game, two players, moving in turns, and a test
that determined whether the game has been won. Your implementation
must detect illegal moves and raise an error when a move is illegal.
The default board in Connect Four has a size of 7 Ã—6; your
implementation should also allow differently-sized boards
>>> I created three files for each object: Board, Player, ConnectFour.
I also created a Test file to test certain functionalities.

- Board: represents a board object with a constructor that takes two
values: height and width. The board creates a 2D array of the given
dimensions. It allows to add a checker (or checkers) at a given column,
and detects illegal checkers or full columns, or full boards.

- Player: represents a player object which has a designated checker
and a number of moves to keep track. The player has different
algorithms to choose its next move, namely: Random, MiniMax, or
Monte Carlo.
        >>> Random: selects a random available column
        >>> Minimax:
        >>> Monte Carlo

- ConnectFour: represents the game, which initializes a board of
user-input dimensions, and two players with a specified playing
algorithm (listed above), alternates turns between players, and
ends the game if a win or a tie occur.





4) Consider a modified version of the Connect Four game in
which both players have one additional type of move they can play:
randomly drop one stone in an open column and force the next player
to also randomly drop one stone in an open column. Modify your
algorithm to play this modified version of Connect Four
>>>


5) Modify your agent to use Monte Carlo Tree Search instead
of the Minimax algorithm. You can use a random playout or design
a different strategy.
>>>

yu
